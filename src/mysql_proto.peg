sql <- set_query / select_query / update_query / insert_query / delete_query / show_query / desc_query / use_query ~;

% --------------- USE

use_query <- space? use space database space? `
    [_,_Use,_,Database,_] = Node,
    {use, Database}
`;


% --------------- DESC

desc_query <- space? describe space table space? `
    [_,_Desc,_,Table,_] = Node,
    {describe, Table}
`;

% --------------- SHOW

show_query <- show_status / show_create_table / show_tables_from / show_tables_like / show_tables / show_databases / show_fields ~;

show_status <- space? show space table_keyword space status space like space like:string space? `
    #show{type=status, from=proplists:get_value(like, Node)}
`;

show_tables <- space? show (space full)? space (tables_keyword / schemas) space? `
    case Node of
        [_,show,[],_,_Tables,_] ->
            #show{type=tables, full=false, from=undefined};
        [_,show,[_,full],_,_Tables,_] ->
            #show{type=tables, full=true, from=undefined}
    end
`;

show_create_table <- space? show space #(?i)create# space table_keyword space key:key space? `
    #show{type = create_table, from=proplists:get_value(key,Node)}
`;

show_tables_from <- show_tables:show_tables space from space key:key space? `
    ShowTables = proplists:get_value(show_tables, Node),
    ShowTables#show{from=proplists:get_value(key,Node)}
`;

show_tables_like <- show_tables:show_tables space like space pattern:string space? `
    ShowTables = proplists:get_value(show_tables, Node),
    ShowTables#show{from={like,proplists:get_value(pattern,Node)}}
`;

show_databases <- space? show space databases space? `
    #show{type=databases}
`;


show_fields <- space? show full:(space full)? space (fields_keyword) space from space key:key space? `
    Full = lists:member(full,proplists:get_value(full,Node)),
    #show{type=fields, full=Full, from = proplists:get_value(key,Node)}
`;


% --------------- SET

set_query <- set space head:system_set tail:(space? ',' space? s:system_set )* space? `
    Head = proplists:get_value(head,Node),
    Tail = [proplists:get_value(s,N) || N <- proplists:get_value(tail,Node)],
    #system_set{query = [Head|Tail]}
`;

system_set <- var:set_var space? '=' space? val:value / names:'NAMES' space val:string `
    case proplists:get_value(names,Node) of
        undefined ->
            {proplists:get_value(var,Node), proplists:get_value(val,Node)};
        N ->
            {#variable{name = N, scope = session}, proplists:get_value(val,Node)}
    end
`;

% --------------- SELECT

select_query <- select_limit / select_order / select_group / select_where / select_from / select_simple ~;

select_simple <- space? select space params space? `
    #select{params=lists:nth(4, Node)}
`;

select_from <- select_simple space from space tables space? `
    [#select{params=Query}, _, _From, _, Tables, _] = Node,
    #select{params=Query, tables=Tables}
`;

select_where <- select_from space where space conditions space? `
    [Select, _, _Where, _, Conditions, _] = Node,
    Select#select{conditions=Conditions}
`;
select_group <- ( select_where / select_from ) space group_by space group_datas space? `
    [Select, _, _GroupBy, _, Groups, _] = Node,
    Select#select{group=Groups}
`;
select_order <- ( select_group / select_where / select_from ) space order_by space order_datas space? `
    [Select, _, _OrderBy, _, Orders, _] = Node,
    Select#select{order=Orders}
`;

select_limit <- ( select_order / select_group / select_where / select_from / select_simple ) space limit space integer (space offset space integer)? space? `
    case Node of
        [Select,_,limit,_,Limit,[],_] ->
            Select#select{limit=Limit};
        [Select,_,limit,_,Limit,[_,offset,_,Offset],_] ->
            Select#select{limit=Limit, offset=Offset}
    end
`;

order_datas <- head:order_data tail:( space? ',' space? order_data )* `
    [proplists:get_value(head, Node)|[ lists:nth(4,I) || I <- proplists:get_value(tail, Node) ]]
`;
order_data <- (key / integer) (space sort)? `
    case Node of
        [Key, [_, Sort]] -> #order{key=Key, sort=Sort};
        [Key, []] -> #order{key=Key, sort=asc}
    end
`;
sort <- asc / desc ~;

group_datas <- head:group_data tail:( space? ',' space? group_data )* `
    [proplists:get_value(head, Node)|[ lists:nth(4,I) || I <- proplists:get_value(tail, Node) ]]
`;
group_data <- key / integer ~;


% ---------------- UPDATE

update_query <- update_where / update_simple ~;
update_simple <- space? update space table_general space set space sets space? `
    #update{table=lists:nth(4, Node), set=lists:nth(8, Node)}
`;
update_where <- update_simple space where space conditions space? `
    [Update, _, _Where, _, Conditions, _] = Node,
    Update#update{conditions=Conditions}
`;
sets <- head:set_value tail:( space? ',' space? set_value )* `
    [proplists:get_value(head, Node)| [ lists:nth(4, I) || I <- proplists:get_value(tail, Node) ] ]
`;
set_value <- key space? '=' space? param_general `
    #set{key=lists:nth(1, Node), value=lists:nth(5, Node)}
`;

% ---------------- DELETE

delete_query <- delete_where / delete_simple ~;
delete_simple <- space? delete space table_general space? `
    #delete{table=lists:nth(4, Node)}
`;
delete_where <- delete_simple space where space conditions space? `
    [Delete, _, _Where, _, Conditions, _] = Node,
    Delete#delete{conditions=Conditions}
`;

% ---------------- INSERT

insert_query <- insert_values_keys / insert_values / insert_set ~;
insert_values_keys <- space? insert space table_general space? '(' space? keys space? ')' space values space? '(' space? params space? ')' space? `
    Values = lists:zipwith(fun(X,Y) ->
        #set{key=X, value=Y}
    end, lists:nth(8, Node), lists:nth(16, Node)),
    #insert{table=lists:nth(4, Node), values=Values}
`;
insert_values <- space? insert space table_general space values space? '(' space? params space? ')' space? `
    #insert{table=lists:nth(4, Node), values=lists:nth(10, Node)}
`;
insert_set <- space? insert space table_general space set space sets space? `
    #insert{table=lists:nth(4, Node), values=lists:nth(8, Node)}
`;

% ---------------- COMMON TYPES

tables <- head:table tail:( space? ',' space? table )* `
    [proplists:get_value(head, Node)|[ lists:nth(4,I) || I <- proplists:get_value(tail, Node) ]]
`;

table_general <- table_alias / table_value ~;
table <- table_alias / table_value / param_sql ~;
table_alias <- key space as space key `
    #table{name=lists:nth(1, Node), alias=lists:nth(5, Node)}
`;
table_value <- key `
    #table{name=Node, alias=Node}
`;

comparator <- '<=' / '=<' / '=>' / '>=' / '<>' / '!=' / '<' / '>' / '=' / like `
case Node of
    <<"<=">> -> lte;
    <<"=<">> -> lte;
    <<">=">> -> gte;
    <<"=>">> -> gte;
    <<"!=">> -> neq;
    <<"<>">> -> neq;
    <<"<">> -> lt;
    <<">">> -> gt;
    <<"=">> -> eq;
    like -> like
end
`;

conditions <- conditions_normal_chain / conditions_normal / conditions_parens_chain / conditions_parens ~;
conditions_parens_chain <- space? '(' conditions ')' space? nexo space conditions space? `
    case Node of
        [_,_,Cond,_,_,Nexo,_,Next,_] -> #condition{nexo=Nexo, op1=Cond, op2=Next}
    end
`;
conditions_parens <- space? '(' first:conditions ')' space? `
    proplists:get_value(first, Node)
`;
conditions_normal_chain <- space? condition space nexo space conditions space? `
    case Node of
        [_,Cond,_,Nexo,_,Next,_] -> #condition{nexo=Nexo, op1=Cond, op2=Next}
    end
`;
conditions_normal <- space? condition space? `lists:nth(2, Node)`;
condition <- condition_comp / condition_set ~;
condition_set <- param space? set_comp subquery `
    #condition{nexo=lists:nth(3,Node), op1=lists:nth(1,Node), op2=lists:nth(4,Node)}
`;
condition_comp <- param space? comparator space? param `
    #condition{nexo=lists:nth(3,Node), op1=lists:nth(1,Node), op2=lists:nth(5,Node)}
`;

subquery <- space? '(' space? ( select_query / set_datas ) space? ')' space? `
    #subquery{subquery=lists:nth(4, Node)}
`;
set_datas <- head:set_data tail:( space? ',' space? set_data )* `
    [proplists:get_value(head, Node)|[ lists:nth(4,I) || I <- proplists:get_value(tail, Node) ]]
`;
set_data <- value ~;

nexo <- nexo_and / nexo_or ~;
set_comp <- in / exist / all / any ~;

params <- head:param tail:( space? ',' space? param )* `
    [proplists:get_value(head, Node)|[ lists:nth(4,I) || I <- proplists:get_value(tail, Node) ]]
`;

param_general <- param_var / param_function / param_value / param_key / param_sql ~;
param <- param_var / param_arithmetic / param_function / param_value / param_all / param_all_alias / param_key_alias / param_key / param_sql ~;
param_sql <- subquery (space as space key)? `
    case Node of
        [#subquery{subquery=Query}, [_,_As,_,Key]] -> #subquery{name=Key, subquery=Query};
        [#subquery{subquery=Query}, []] -> #subquery{subquery=Query}
    end
`;
param_key_alias <- key '\.' key (space as space key)? `
    case Node of
        [Alias, _, Val, [_, _As, _, Key]] -> #key{alias=Key, name=Val, table=Alias};
        [Alias, _, Val, []] -> #key{alias=Val, name=Val, table=Alias}
    end
`;
param_key <- key (space as space key)? `
    case Node of
        [Val, [_, _As, _, Key]] -> #key{alias=Key, name=Val};
        [Val, []] -> #key{alias=Val, name=Val}
    end
`;
param_value <- value (space as space key)? `
    case Node of
        [Val, [_, _As, _, Key]] -> #value{name=Key, value=Val};
        [Val, []] -> #value{value=Val}
    end
`;
param_var <- var (space as space key)? `
    case Node of
        [Var, [_, _As, _, Key]] -> Var#variable{label=Key};
        [Var, []] -> Var
    end
`;
param_all <- '*' `#all{}`;
param_all_alias <- key '\.' '*' `#all{table=lists:nth(1,Node)}`;
param_function <- key space? '(' space? params? space? ')' (space as space key)? `
    case Node of
        [Name, _, _, _, Params, _, _, [_, _As, _, Key]] -> 
            #function{name=Name, params=Params, alias=Key};
        [Name, _, _, _, Params, _, _, []] -> 
            #function{name=Name, params=Params}
    end
`;

% --------------- From arithmetic (extras in neotoma)

param_wa <- param_function / param_value / param_all / param_all_alias / param_key_alias / param_key / param_sql ~;
param_arithmetic <- additive ~;
additive <- multitive space? ( "+" / "-" ) space? additive / mul:multitive `
    case Node of
        [A, _, Type, _, B] -> #operation{type=Type,op1=A,op2=B};
        {mul,Param} -> Param
    end
`;
multitive <- primary space? ( "*" / "/" ) space? Mul:multitive / pri:primary `
    case Node of
        [A, _, Type, _, {'Mul', B}] -> #operation{type=Type, op1=A, op2=B};
        {pri,Param} -> Param
    end
`;
primary <- par:("(" space? add:additive space? ")") / dec:param_wa `
    case Node of
        {dec,Param} -> Param;
        {par,List} -> proplists:get_value(add,List)
    end
`;

% ------------- reserved words

status <- #(?i)status# `status`;
like <- #(?i)like# `like`;
use <- #(?i)use# `use`;
describe <- #(?i)desc# / #(?i)describe# `describe`;
limit <- #(?i)limit# `limit`;
offset <- #(?i)offset# `offset`;
full <- #(?i)full# `full`;
schemas <- #(?i)schemas# `schemas`;
show <- #(?i)show# `show`;
fields_keyword <- #(?i)fields# `fields`;
tables_keyword <- #(?i)tables# `tables`;
table_keyword <- #(?i)table# `table`;
databases <- #(?i)databases# `databases`;
update <- #(?i)update# `update`;
select <- #(?i)select# `select`;
set <- #(?i)set# `set`;
from <- #(?i)from# `from`;
where <- #(?i)where# `where`;
as <- #(?i)as# `as`;
nexo_or <- #(?i)or# `nexo_or`;
nexo_and <- #(?i)and# `nexo_and`;
in <- #(?i)in# `in`;
any <- #(?i)any# `in`;
exist <- #(?i)exist# `exist`;
all <- #(?i)all# `all`;
group_by <- #(?i)group +by# `group_by`;
asc <- #(?i)asc# `asc`;
desc <- #(?i)desc# `desc`;
order_by <- #(?i)order +by# `order_by`;
delete <- #(?i)delete +from# `delete`;
insert <- #(?i)insert +into# `insert`;
values <- #(?i)values# `values`;

database <- key ~;

% complex types
keys <- head:key tail:( space? ',' space? key )* `
    [proplists:get_value(head, Node)|[ lists:nth(4,I) || I <- proplists:get_value(tail, Node) ]]
`;
key <- '`' chars:(!'`' ("\\\\" / '\\`' / .))+ '`' / [a-zA-Z] [A-zA-Z0-9_]* `
    case length(Node) of
        3 -> iolist_to_binary(proplists:get_value(chars, Node));
        2 -> iolist_to_binary([lists:nth(1,Node)|lists:nth(2,Node)])
    end
`;
value <- string / null / number ~;

var <- '@' '@'? key `
    [_L,G,Key] = Node,
    Scope = case G of
        [] -> global;
        _ -> local
    end,
    #variable{name=Key, scope=Scope}
`;

set_var <- '@'? '@'? key `
    [L,G,Key] = Node,
    Scope = if
        L == [] andalso G == [] -> session;
        G == [] -> global;
        true -> local
    end,
    #variable{name=Key, scope=Scope}
`;


% Basic types
string <- "'" ((!"'" ("\\\\" / "\\'" / .)) ("''")?)* "'" `binary:replace(iolist_to_binary(lists:nth(2, Node)), <<"''">>, <<"'">>)`;
number <- float / integer ~;
integer <- [0-9]+ `
    list_to_integer(lists:flatten([ binary_to_list(I) || I <- Node ]))
`;
float <- [0-9]* '.' [0-9]+ `
    case Node of
        [Int,_,Dec] when Int =/= [] ->
            list_to_float(
                lists:flatten([ binary_to_list(I) || I <- Int ]) ++ "." ++
                lists:flatten([ binary_to_list(D) || D <- Dec ])
            );
        [_,_,[Dec]] ->
            list_to_float("0." ++ lists:flatten([ binary_to_list(D) || D <- Dec ]))
    end
`;
space <- [ \t\n\s\r]* ~;
null <- [nN] [uU] [lL] [lL] `null`;

`
-include("../include/sql.hrl").
`
